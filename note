#!/bin/bash
# 
# note - an automated journaling script
#
# note [-L -d -o -H -F -h] [ [year1 [month1 month2 ...] ] year2 ...]
#
# Running note without arguments creates the file:
# $JOURNAL_DIR/year/month/year.month.day.tex
# and runs $EDITOR on this file, or vim by default.
#
# note [year1 year2 ...] compiles all of the entries from
# those years into a pdf file.
# 
# note [year1 [month1 month2 ...] ] ... compiles just those
# months from the preceding year
# 
# The header and footer for the output pdf are (default) specified in
# this script by:
#		JOURNAL_DIR=~/journal
#		FOUT=$JOURNAL_DIR/out.tex
#		HEADER=$JOURNAL_DIR/header.tex
#		FOOTER=$JOURNAL_DIR/append.tex
#
# To compile all the entries with pdflatex, specify -L, and
# provide years/months.
#
# =================================================
# Author: Michael B Hynes, mbhynes@uwaterloo.ca
# License: GPL 3
# Creation Date: Fri Feb  6 13:52:55 2015
# Last Modified: Fri Feb  6 14:00:48 2015
# =================================================

JOURNAL_DIR=""
FOUT=""
HEADER=""
FOOTER=""
VERBOSE_FLAG=""
RUN_PDFLATEX_FLAG=""
REGEX="posix-extended"
PATTERN='[[:digit:]]+.[[:digit:]]+.[[:digit:]]+.tex'
TEXFLAGS="-file-line-error -interaction nonstopmode -shell-escape"

SCRIPT_FULLNAME=$0
SCRIPT_NAME=$(basename $0)
msg () {
	echo "$SCRIPT_NAME: $@" 1>&2
}
warn () {
	msg WARNING: $@
}
error () {
	msg ERROR: $@
}

#=========================================
print_help() {
	disp_opts -h -n 30 $SCRIPT_FULLNAME 2>/dev/null
}

expand_macros()  #file 
{
	_sep=3cm
	_space="\\\\hspace{$_sep}"
	_dots="\*$_space\*$_space\*$_space"
	sed -i -f - $1 <<EOF_SED 
s/^x$/\\\\begin{center}$_dots\\\\end{center}/g 
EOF_SED
}

section_string() { #string 
	echo "\\section*{$@}"
}

print_entry_name() { 
	timestamp=$(basename "$1" .tex | tr '.' '/')
	daynum=$(date '+%j' -d $timestamp)
	msg "$timestamp => ${daynum##0}"
	echo "Day ${daynum##0}: $(date '+%b %e, %Y' -d $timestamp)"
}

cat_uncommented_lines() {
	sed -r -e '/^[[:space:]]*%.*/d;' $1 >> $FOUT
}

compile() # /full/path/to/file
{
	file=$(basename $1 $(ext $1))
	dir=$(dirname $1)
	cd $dir
	if [ -n "$VERBOSE_FLAG" ]; then
		pdflatex $TEXFLAGS $file 
		pdflatex $TEXFLAGS $file 
		[ -n "$BIBTEX_FLAG"] && bibtex -terse $file
		pdflatex $TEXFLAGS $file 
	else
		pdflatex $TEXFLAGS $file 2>&1 1>/dev/null
		pdflatex $TEXFLAGS $file 2>&1 1>/dev/null
		[ -n "$BIBTEX_FLAG"] && bibtex -terse $file
		pdflatex $TEXFLAGS $file 2>&1 1>/dev/null
	fi
	rm *.{aux,log,out}
	cd $OLDPWD
}

files_from_year() # year
{
	year=$1
	find $JOURNAL_DIR \
		-regextype $REGEX \
		-regex ".*/$year/.*/$PATTERN" \
		| sort -d
}


# if given parameters, parse and compile
optstring="Ld:o:H:F:hv"
while getopts "$optstring" opt; do
	case "$opt" in
		L)
			RUN_PDFLATEX_FLAG="true"
			;;
		d)
			JOURNAL_DIR="$OPTARG"
			;;
		o)
			FOUT="$OPTARG"
			;;
		H)
			HEADER="$OPTARG"
			;;
		F)
			FOOTER="$OPTARG"
			;;
		h)
			print_help 
			exit 1
			;;
		v)
			VERBOSE_FLAG="true"
			;;
		:)
			error "-$opt requires argument" 
			;; 
		?)
			error invalid option
			;; 
	esac
done
shift $((OPTIND - 1))

if [ -z "$JOURNAL_DIR" ]; then
	JOURNAL_DIR=$HOME/journal
fi

if [ ! -d "$JOURNAL_DIR" ]; then
	error "$JOURNAL_DIR is not a valid directory; exiting"
	exit 1
fi

if [ -z "$FOUT" ]; then
	FOUT=$JOURNAL_DIR/out.tex
fi

if [ -z "$HEADER" ]; then
	HEADER=$JOURNAL_DIR/header.tex
fi

if [ -z "$FOOTER" ]; then
	FOOTER=$JOURNAL_DIR/append.tex
fi

# write new entry, if no years or months specified
if (($# == 0)); then
	year=`date +%Y`
	month=`date +%m`
	day=`date +%d`
	dir=$JOURNAL_DIR/$year/$month
	newfile=$dir/$year.$month.$day.tex

	if [ ! -d $dir ]; then
		mkdir -p $dir
	fi

	if [ -n "$EDITOR" ]; then
		$EDITOR $newfile
	else
		vim $newfile
	fi

	exit
fi

year=`date +%Y`
month=''
year_files=''
month_files=''
tot_files=''
while (($# > 0)); do

	#check for years with 4 numbers: 2012
	if egrep -wq [0-9]{4} <<< "$1"; then
		year=$1
		if egrep -wq [0-9]{02} <<< "$2"; then
			year_files=$(files_from_year $year)
		else
			tot_files="$tot_files $(files_from_year $year)"
		fi

	# match months with 2 numbers: 02
	elif echo "$1" | egrep -wq [0-9]{2}; then
		month=$1
		tot_files="$tot_files $(tr ' ' '\n' <<<$year_files | egrep "/$year/$month/")"
	fi

	shift
done

if [ -r "$HEADER" ]; then
	cat $HEADER > $FOUT
else
	warn "header=$HEADER is not readable"
fi

for file in $(echo $tot_files |tr ' ' '\n' | sort -ud); do
	section_string $(print_entry_name $file) >> $FOUT
	cat_uncommented_lines $file >> $FOUT
done 

expand_macros $FOUT

if [ -f "$FOOTER" ]; then
	cat $FOOTER >> $FOUT
else
	warn "footer=$FOOTER is not readable"
fi

[ -n "$RUN_PDFLATEX_FLAG" ] && cd $JOURNAL_DIR; compile $FOUT; exit 
