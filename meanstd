#!/usr/bin/octave -q
# print mean/stdev of input OPTFILES, normalized to 1/(N-1)
#
#=====================================
# ex: set filetype=octave:
#=====================================

#==================================================
# SET OPTIONAL COMMAND-LINE ARGUMENTS
#==================================================
global OPT_VAR_NAMES = {"dim" "cols" "flag_std" "flag_keep_col1" "output_format"}; 
global OPT_VAR_FLAGS = {"d" "c" "s" "1" "f"};
global OPT_VAR_DEFAULTS = {"2" "[]" "0" "0" "'%8.8f\t'"};
global OPT_FLAG_HASARGS = {"d" "c" "f"}; 

parse_opts

for k = 1:length(OPTFILES)

  fin = OPTFILES{k};
	data = load(fin);
	[n,m] = size(data);

	# check if cols is contained in [1:m]
	ncols = numel(cols);
	colspan = [1:m];
	if !ncols || !(numel(intersect(cols,colspan)) == ncols)
		cols = colspan;
		ncols = numel(cols);
	end

	v = data(:,cols);
	v_mean = mean(v,dim);

	if flag_std
		v_std = std(v,0,dim);
		ncols = length(v_mean(1,:));
		out = nan(length(v_mean(:,1)),2*ncols);
		for j = 1:ncols
			out(:,2*(j-1)+1) = v_mean(:,j);
			out(:,2*(j-1)+2) = v_std(:,j);
		end
	else
		out = [v_mean];
	end

	# put leading column back 
	# "-1 -d 2" flags must be set
	if (flag_keep_col1) && (dim == 2)
		out = [data(:,1) out];
	end


	output_str = [repmat(output_format,1,length(out(1,:))) "\n"];

	% print to stdout
	fprintf(1,output_str,out');

end
