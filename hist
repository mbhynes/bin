#!/usr/bin/octave -q
# generate histogram of input OPTFILES
#
#=====================================
# ex: set filetype=octave:
#=====================================

#==================================================
# SET OPTIONAL COMMAND-LINE ARGUMENTS
#==================================================
global OPT_VAR_NAMES = {"bins" "cols" "flag_norm" "flag_err" "output_format" "display_help"}; 
global OPT_VAR_FLAGS = {"b" "c" "N" "e" "f" "h"};
global OPT_VAR_DEFAULTS = {"100" "[]" "0" "0" "'%8.8f\t'" "false"};
global OPT_FLAG_HASARGS = {"b" "c" "f"}; 

parse_opts

if help_flag_specified()
	display_opts()
	exit
end

if (length(OPTFILES) == 0)
	OPTFILES={STDIN};
end

for k = 1:length(OPTFILES)

  fin = OPTFILES{k};
	if strcmp(fin,STDIN)
		data = read_mat_stdin();
	else
		data = load(fin);
	end
	[n,m] = size(data);

	# check if cols is contained in [1:m]
	ncols = numel(cols);
	colspan = [1:m];
	if !ncols || !(numel(intersect(cols,colspan)) == ncols)
		cols = colspan;
		ncols = numel(cols);
	end

	v = data(:,cols);
	[counts,bin_centres] = hist(v,bins);
	if (ncols == 1)
		counts = counts';
		bin_centres = bin_centres';
	end

	if flag_norm
		tot_counts = sum(counts);

		if flag_err
			dcounts = sqrt(counts);
		end
		# broadcast division
		warning ("off", "Octave:broadcast");
		if flag_err
			dcounts = sqrt(counts) ./ tot_counts;
		end
		counts = counts ./ tot_counts;
	end

	if !flag_norm && flag_err
		dcounts = sqrt(counts);
	end

	if flag_err
		cols_out = 2*ncols+1;
		out = nan(length(counts(:,1)),cols_out);
		for j = 1:ncols
			out(:,2*(j-1)+2) = counts(:,j);
			out(:,2*(j-1)+3) = dcounts(:,j);
		end
		out(:,1) = bin_centres;
	else
		out = [bin_centres counts];
	end

	output_str = [repmat(output_format,1,length(out(1,:)))];
	fprintf(1, [output_str(1:end-1) "\n"],out');

	#output_str = [repmat(output_format,1,length(out(1,:))) "\n"];

	% print to stdout
	#fprintf(1,output_str,out');

end
