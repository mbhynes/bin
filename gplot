#!/bin/bash
# plot multiple files on single plot with gnuplot
# =================================================
# Author: Michael B Hynes, mbhynes@uwaterloo.ca
# License: GPL 3
# Creation Date: Mon Jan 26 13:33:27 2015
# Last Modified: Sat 02 May 2015 10:41:36 PM EDT
#=================================================

# set defaults
DEFAULT_TERM="postscript eps enhanced"
delimiter=" "
linewidth="2"
terminal_size="5,2.5"
terminal=$DEFAULT_TERM
font="Times,14,Bold" 
xrange="autoscale x"
yrange="autoscale y"

# plotting definitions for gnuplot 
eol="\\"

SCRIPT_NAME=$(basename $0)
msg () {
	echo "$SCRIPT_NAME: $@" 1>&2
}
warn () {
	msg WARNING: $@
}
error () {
	msg ERROR: $@
}

# add character escapes to certain strings
escape_tex_chars() {
	echo "$@"
	# echo "$@" | sed -r -e 's/\\/\\\\/g; s/\$/\\$/g;'
	# echo "$@" | sed -r -e 's/\\/\\\\/g; s/\$/\\$/g;'
}

add_file_to_plot() { # $1=plot_prefix, $2=comma_suffix
	if (($# == 2)); then
		plot_arg="$1"
		linebreak="$2"
	elif (($# == 1)); then
		if [[ "$1" == "plot" ]]; then
			plot_arg="$1"
			linebreak=""
		else
			plot_arg=""
			linebreak="$1"
		fi
	else
		plot_arg=""
		linebreak=""
	fi
		
	colrange=1:2
	if [ -n "$errorbars" ];	then
		colrange=1:2:3
		if [ -z "$lines" ]; then
			echo "$plot_arg '$file' using $colrange title '$leg_entry' with errorbars ls $num $linebreak"
		else
			echo "$plot_arg '$file' using $colrange title '$leg_entry' with errorbars ls $num, $eol"
			echo "	'' using $colrange notitle $lines ls $num $linebreak"
		fi
		return
	fi

	if [ -n "$lines" ] && [ -n "$points" ]; then
		echo "$plot_arg '$file' using $colrange $lines title '$leg_entry' ls $num,  $eol" 
		echo "	'' using $colrange nontitle $points ps $num $linebreak"
	elif [ -n "$lines" ]; then
		echo "$plot_arg '$file' using $colrange $lines title '$leg_entry' ls $num $linebreak" 
	elif [ -n "$points" ]; then
		echo "$plot_arg '$file' using $colrange $points title '$leg_entry' ps $num $linebreak"
	fi
}

# default plot header
generate_header() {
	cat <<-EOF 
	#
	# $(date)
	#

	set terminal $terminal size $terminal_size color colortext font '$font' linewidth $linewidth
	set samples 500, 500
	set border linewidth $linewidth
	set style fill solid 2.70 noborder
	set style data lines

	set $xrange
	set $yrange

	# Line styles 
	set style line 1 lc rgb "#A30000" lt 1 lw $linewidth pt 13 ps 1.5
	set style line 2 lc rgb "#00A000" lt 2 lw $linewidth pt 3 ps 1.2
	set style line 3 lc rgb '#0060ad' lt 3 lw $linewidth pt 9 ps 1.5 
	set style line 4 lc rgb "#ad0060" lt 4 lw $linewidth pt 5 ps 1.2
	set style line 5 lc rgb "#F25900" lt 5 lw $linewidth pt 7 ps 1.5
	set style line 6 lc rgb '#60ad00' lt 6 lw $linewidth pt 1 ps 1.5 
	set style line 7 lc rgb '#000b1d' lt 7 lw $linewidth pt 14 ps 1.5 

	# Fill styles 
	set style fill border
	# set style fill solid 0.6 border

	# Line style for axes
	set style line 80 lt 1 lc rgb "#000000" lw $((linewidth-1))

	# Line style for grid
	set style line 81 lt 1 lc rgb "#808080" lw 1
	set grid back linestyle 81

	# Remove border on top and right.  
	set border 3 back linestyle 80 
			
	set xtics nomirror
	set ytics nomirror
	set xtics norangelimit
	set format '%g'

	# logscale options
	#set mxtics 10    

	set datafile missing "NaN"
	set datafile separator "$delimiter"
	set output '$fout' 
EOF
	if [ -n "$timeformat" ]; then
		cat <<-EOF
			set xdata time
			set timefmt "$timeformat"
EOF
	fi

	# set the x,y labels, if they exist
	if [ -n "$setlogy" ]; then
		echo "set log y" 
		echo 'set format y "10^{%L}"' 
	fi 
	if [ -n "$setlogx" ]; then
		echo "set log x" 
		echo 'set format x "10^{%L}"' 
	fi
	if [ "$x_label" ]; then
		echo "set xlabel '$(escape_tex_chars $x_label)'" 
	fi
	if [ "$y_label" ]; then
		echo "set ylabel '$(escape_tex_chars $y_label)'"
	fi

	# set the legend, if it exists
	# leg_pos allows position info to be entered; it may be empty
	if [ "$legend" ]; then
		echo "set key $leg_pos reverse enhanced autotitle" 
	else
		echo "set key off" 
	fi
}

OPTSTRING=plc:t:ex:y:L:h:o:P:T:f:s:w:FX:Y:d:Zz
while getopts $OPTSTRING opt; do
	case $opt in
		l)
			lines="with lines"
			;;
		p)
			points="with points"
			;;
		c)
			num_cols="$OPTARG"
			;;
		d)
			delimiter="$OPTARG"
			;;
		t)
			timeformat="$OPTARG"
			;;
		X)
			xrange="$OPTARG"
			if [[ "${xrange:0:1}" != '[' ]]; then
				xrange="xrange [$xrange]"
			else
				xrange="xrange $xrange"
			fi
			;;
		Y)
			yrange="$OPTARG"
			if [[ "${yrange:0:1}" != '[' ]]; then
				yrange="yrange [$yrange]"
			else
				yrange="yrange $yrange"
			fi
			;;
		F)
			filled="true"
			;;
		s)
			terminal_size="$OPTARG"
			;;
		T)
			terminal="$OPTARG"
			;;
		w) 
			linewidth="$OPTARG"
			;;
		f)
			font="$OPTARG"
			;;
		o)
			fout="$OPTARG"
			;;
		e)
			errorbars="true"
			;;
		x)
			x_label="$OPTARG"
			;;
		y)
			y_label="$OPTARG"
			;;
		L) # read legend strings into array
			read -a legend <<< "$OPTARG"
			;;
		P)
			leg_pos="$OPTARG"
			;;
		h)
			header="$OPTARG"
			;;
		Z)
			setlogy="true"
			;;
		z)
			setlogx="true"
			;;
		:)
			echo "-$opt requires argument"
			exit 1
			;;
		\?) 
			echo "invalid option -$opt"
			;;
	esac
done

shift $((OPTIND - 1))

nfiles=$#
if ((nfiles == 0)); then
	disp_opts -h -n 10 $0 2>/dev/null
	exit 1
fi

if [ -z "$fout" ]; then
	disp_opts -h -n 10 $0 2>/dev/null
	exit 1
fi


# set default plot to be with points
if [ -z "$lines" ] && [ -z "$points" ]; then
	points="with points"
fi

# generate script to pass to gnuplot
plot_script=$(mktemp)

# write header to script
if [ -r "$header" ]; then
	cat $header 
else
	generate_header 
fi > $plot_script

# =============================================
# plot files
# =============================================
k=0
for file in "$@"; do

	# count cols if unspecified;
	# WARNING: cannot use process substitution if -c <num_cols> is not given 
	if [ -z "$num_cols" ]; then
		num_cols=$(ncols -d "$delimiter" $file)
	fi

	if ((num_cols == 1)); then
		warn "$file contains only $num_cols columns---skipping"
		continue
	fi

	if [ -z "${legend[k]}" ]; then
		leg_entry=""
	else
		leg_entry="$( escape_tex_chars ${legend[k]} )"
	fi
	# msg "Adding $leg_entry to plot"

	num=$((k+1))
	line="ls $num"

	# check if only 1 file is given: preceding plot; no trailing comma
	if ((nfiles == 1)) ; then
		add_file_to_plot "plot" 
		continue
	fi

	# first plot command; preceding 'plot', followed by comma
	if ((k == 0)) ;	then
		add_file_to_plot "plot" ",$eol"

	# last plot command;	no preceding 'plot', no comma
	elif ((k+1 == nfiles));	then
		add_file_to_plot

	# middle plot commands; no plot, followed by comma
	else
		add_file_to_plot ",$eol"
	fi

	((k++))
done >> $plot_script

cat $plot_script
gnuplot $plot_script
rm $plot_script

# convert default output to eps 
# if [[ "$terminal" == "$DEFAULT_TERM" ]]
# then
# 	latex $fout 1>&2 2>/dev/null
# 	dvips -o $fout_prefix.eps $fout_prefix.dvi 1>&2 2>/dev/null
# 	rm $fout_prefix.dvi
# fi

exit
