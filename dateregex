#!/bin/bash
#
# dateregex [timefmt1 timefmt2 ...]
#
# Convert a timefmt2 to an extended posix regexi for grep -E
#
# Common regex chars like "[ ] . ? *" will be escaped.
#
# =================================================
# Author: Michael B Hynes, mbhynes@uwaterloo.ca
# License: GPL 3
# Creation Date: Mon 16 Feb 2015 12:39:40 PM EST
# Last Modified: Mon 16 Feb 2015 11:33:56 PM EST
# =================================================

SCRIPT_NAME=$(basename $0)
msg () {
	echo "$SCRIPT_NAME: $@" 1>&2
}
warn () {
	msg WARNING: $@
}
error () {
	msg ERROR: $@
}
gen_sed_script() {
	cat <<EOF

# protect some egrep characters that *may* occur in dates
# s/\[/\\\\[/g
# s/\]/\\\\]/g
s/\?/\\\\?/g
s/\./\\\\./g
s/\*/\\\\*/g

# convert some usual date format characters
s/%s/[0-9]{11}/g
s/%Y/[0-9]{4}/g
s/%y/[0-9]{2}/g
s/%m/(0[1-9]|1[0-2])/g
s/%d/(0[1-9]|1[0-9]|2[0-9]|3[0-1])/g
s/%h/%b/g
s/%b/(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)/g
s/%S/([0-5][0-9])/g
s/%M/([0-5][0-9])/g
s/%H/([0-1][0-9]|2[0-3])/g

EOF
}

convert_to_regex() {
	sed -f <(gen_sed_script) 
}

optstring=""
while getopts "$optstring" opt; do
	case "$opt" in
		:)
			error "-$opt requires argument" 
			;; 
		?)
			error invalid option
			;; 
	esac
done
shift $((OPTIND - 1))

for str in "$@"; do
	convert_to_regex <<< "$str"
done
